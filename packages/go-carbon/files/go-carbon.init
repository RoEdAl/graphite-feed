#!/bin/sh /etc/rc.common

START=99
STOP=10

USE_PROCD=1
NAME=go-carbon
PROG=/usr/bin/go-carbon
CONFIG_DIR=/etc/go-carbon

echoerr() {
  echo "$@" | logger -st "$NAME" -p daemon.info
}

get_config_path() {
  if [[ "$1" =~ ^/ ]]; then
    echo $1
  else
    readlink -f "${CONFIG_DIR}/$1"
  fi
}

validate_section_service() {
  uci_load_validate "${NAME}" service "$1" "$2" \
    'enable:bool:0' \
    'config_file:string:go-carbon.conf' \
    'whisper_dir:string:/var/lib/graphite/whisper' \
    'create_whisper_dir:bool:1' \
    'chown_whisper_dir:bool:1'
}

service_instance() {
  if [ "$2" -ne 0 ]; then
    echoerr Validation failed
    return 1
  fi

  if [ "${enable}" -eq 0 ]; then
    echoerr "[$1]" Service is disabled
    return 0
  fi

  local config_path=$(get_config_path "${config_file}")
  if [ -z "${config_path}" ]; then
    echoerr "[$1]" 'Invalid configuration file:' ${config_file}
    return 1
  fi

  if [ ! -d "${whisper_dir}" ]; then
    if [ "${create_whisper_dir}" = 0 ]; then
      echoerr "[$1]" 'Invalid directory:' ${whisper_dir}
      return 1
    else
      mkdir -p "${whisper_dir}" || return 1
    fi
  fi

  if [ "${chown_whisper_dir}" != 0 ]; then
    chown -R carbon:carbon "${whisper_dir}" || return 1
  fi

  procd_open_instance "$1"
  procd_set_param command "$PROG" -config "${config_path}"
  procd_set_param respawn
  procd_set_param stdout 1
  procd_set_param stderr 1
  procd_set_param user carbon
  procd_set_param group carbon
  procd_set_param no_new_privs 1
  procd_set_param reload_signal HUP
  procd_set_param term_timeout 30
  procd_add_jail "$1" ronly requirejail log
  procd_add_jail_mount /etc/hosts
  procd_add_jail_mount /etc/TZ
  procd_add_jail_mount "${config_path}"
  procd_add_jail_mount "${CONFIG_DIR}/storage-aggregation.conf"
  procd_add_jail_mount "${CONFIG_DIR}/storage-schemas.conf"
  procd_add_jail_mount_rw "${whisper_dir}"
  procd_close_instance
}

start_service() {
  config_load "${NAME}"
  config_foreach validate_section_service service service_instance
}

service_triggers() {
  procd_add_reload_trigger "${NAME}"

  procd_open_validate
  validate_section_service
  procd_close_validate
}
